<?phpclass Smart_SB_Connector{    private $avail_functions = array(        'new_post' => 'NewPost',        'edit_post' => 'EditPost',        'get_post' => 'GetPost',        'upload_image' => 'UploadImage',        'get_terms' => 'GetTerms',        'check_credentials' => 'CheckCredentialsPost',    );    function __construct()    {    }    public static function ApiEcho( $val )    {        $output = serialize( $val );        echo json_encode( array( 'type' => 'message', 'value' => $val ) );        die();    }    public static function HandleError( $error )    {        echo json_encode( array( 'type' => 'error', 'value' => $error ) );        die();    }    function CheckCredentialsPost()    {        $auth = $this->CheckCredentials( $_POST[ 'sbc_hash' ], $_POST[ 'function' ] );        $this->ApiEcho( $auth );    }    function CheckCredentials( $signature, $func )    {        if( !isset( $signature ) || !isset( $func ) )        {            $auth = false;        }        else        {            $hash_key = get_option( 'sbc_hash' );            if( $hash_key == $signature )                $auth = true;            else                $auth = false;        }        return $auth;    }    function ProcessRequest()    {        global $current_user; //wp variable        $auth = $this->CheckCredentials( isset( $_POST[ 'sbc_hash' ] ) ? $_POST[ 'sbc_hash' ] : '', isset( $_POST[ 'function' ] ) ? $_POST[ 'function' ] : '' );        if( !$auth && isset( $_POST[ 'sbc_hash' ] ) )        {            $this->HandleError( __( 'Authentication failed 2! You do not have permission to add this blog', 'sb-connector' ) );        }        if( isset( $_POST[ 'function' ] ) && isset( $this->avail_functions[ $_POST[ 'function' ] ] ) )        {            call_user_func( array( $this, ( $auth ? $this->avail_functions[ $_POST[ 'function' ] ] : $this->HandleError( __( 'Authentication failed! You do not have permission to add this blog', 'sb-connector' ) ) ) ) );        }        else        {            $this->HandleError( __( 'No predefined function is available for this call' ) );        }    }    function GetPost()    {        $post = get_post( $_POST[ 'post_id' ], ARRAY_A );        $post = $this->_prepare_post( $post, array( 'post', 'terms', 'custom_fields' ) );        $this->ApiEcho( $post );    }    function EditPost()    {        //Read form data        $custom_fields = unserialize( stripslashes( $_POST[ 'custom_fields' ] ) );        $post_terms_names = unserialize( stripslashes( $_POST[ 'terms_names' ] ) );        $post_category    = isset( $post_terms_names[ 'category' ] ) ? $post_terms_names[ 'category' ] : null;        $post_tags = isset( $post_terms_names[ 'post_tag' ] ) ? $post_terms_names[ 'post_tag' ] : null;        $post_featured_image = $_POST[ 'post_thumbnail' ];        $res     = $this->EditExistingPost( $_POST, $custom_fields, $post_category, $post_tags, $post_featured_image );        $created = $res[ 'success' ];        if( $created != true )        {            $this->HandleError( $created );        }        $information              = array();        $information[ 'post_id' ] = $res[ 'post_id' ];        $information[ 'link' ]    = $res[ 'permalink' ];        $this->ApiEcho( $information );    }    function _prepare_term( $term )    {        $_term = $term;        if( !is_array( $_term ) )            $_term = get_object_vars( $_term );        // For integers which may be larger than XML-RPC supports ensure we return strings.        $_term[ 'term_id' ]          = strval( $_term[ 'term_id' ] );        $_term[ 'term_group' ]       = strval( $_term[ 'term_group' ] );        $_term[ 'term_taxonomy_id' ] = strval( $_term[ 'term_taxonomy_id' ] );        $_term[ 'parent' ]           = strval( $_term[ 'parent' ] );        // Count we are happy to return as an integer because people really shouldn't use terms that much.        $_term[ 'count' ] = intval( $_term[ 'count' ] );        return $_term;    }    protected function _prepare_post( $post, $fields )    {        // holds the data for this post. built up based on $fields        $_post = array( 'post_id' => strval( $post[ 'ID' ] ) );        // prepare common post fields        $post_fields = array(            'post_title' => $post[ 'post_title' ],            'post_date' => $post[ 'post_date' ],            'post_date_gmt' => $post[ 'post_date_gmt' ],            'post_modified' => $post[ 'post_modified' ],            'post_modified_gmt' => $post[ 'post_modified_gmt' ],            'post_status' => $post[ 'post_status' ],            'post_type' => $post[ 'post_type' ],            'post_name' => $post[ 'post_name' ],            'post_author' => $post[ 'post_author' ],            'post_password' => $post[ 'post_password' ],            'post_excerpt' => $post[ 'post_excerpt' ],            'post_content' => $post[ 'post_content' ],            'post_parent' => strval( $post[ 'post_parent' ] ),            'post_mime_type' => $post[ 'post_mime_type' ],            'link' => post_permalink( $post[ 'ID' ] ),            'guid' => $post[ 'guid' ],            'menu_order' => intval( $post[ 'menu_order' ] ),            'comment_status' => $post[ 'comment_status' ],            'ping_status' => $post[ 'ping_status' ],            'sticky' => ( $post[ 'post_type' ] === 'post' && is_sticky( $post[ 'ID' ] ) ),        );        // Thumbnail        $post_fields[ 'post_thumbnail' ] = array();        $thumbnail_id                    = get_post_thumbnail_id( $post[ 'ID' ] );        if( $thumbnail_id )        {            $thumbnail_size                  = current_theme_supports( 'post-thumbnail' ) ? 'post-thumbnail' : 'thumbnail';            $post_fields[ 'post_thumbnail' ] = $this->_prepare_media_item( get_post( $thumbnail_id ), $thumbnail_size );        }        // Consider future posts as published        if( $post_fields[ 'post_status' ] === 'future' )            $post_fields[ 'post_status' ] = 'publish';        // Fill in blank post format        $post_fields[ 'post_format' ] = get_post_format( $post[ 'ID' ] );        if( empty( $post_fields[ 'post_format' ] ) )            $post_fields[ 'post_format' ] = 'standard';        // Merge requested $post_fields fields into $_post        if( in_array( 'post', $fields ) )        {            $_post = array_merge( $_post, $post_fields );        }        else        {            $requested_fields = array_intersect_key( $post_fields, array_flip( $fields ) );            $_post            = array_merge( $_post, $requested_fields );        }        $all_taxonomy_fields = in_array( 'taxonomies', $fields );        if( $all_taxonomy_fields || in_array( 'terms', $fields ) )        {            $post_type_taxonomies = get_object_taxonomies( $post[ 'post_type' ], 'names' );            $terms                = wp_get_object_terms( $post[ 'ID' ], $post_type_taxonomies );            $_post[ 'terms' ]     = array();            foreach( $terms as $term )            {                $_post[ 'terms' ][] = $this->_prepare_term( $term );            }        }        if( in_array( 'enclosure', $fields ) )        {            $_post[ 'enclosure' ] = array();            $enclosures           = (array) get_post_meta( $post[ 'ID' ], 'enclosure' );            if( !empty( $enclosures ) )            {                $encdata                          = explode( "\n", $enclosures[ 0 ] );                $_post[ 'enclosure' ][ 'url' ]    = trim( htmlspecialchars( $encdata[ 0 ] ) );                $_post[ 'enclosure' ][ 'length' ] = (int) trim( $encdata[ 1 ] );                $_post[ 'enclosure' ][ 'type' ]   = trim( $encdata[ 2 ] );            }        }        return $_post;    }    function _prepare_media_item( $media_item, $thumbnail_size = 'thumbnail' )    {        $_media_item = array(            'attachment_id' => strval( $media_item->ID ),            'date_created_gmt' => $media_item->post_date_gmt,            'parent' => $media_item->post_parent,            'link' => wp_get_attachment_url( $media_item->ID ),            'title' => $media_item->post_title,            'caption' => $media_item->post_excerpt,            'description' => $media_item->post_content,            'metadata' => wp_get_attachment_metadata( $media_item->ID ),        );        $thumbnail_src = image_downsize( $media_item->ID, $thumbnail_size );        if( $thumbnail_src )            $_media_item[ 'thumbnail' ] = $thumbnail_src[ 0 ];        else            $_media_item[ 'thumbnail' ] = $_media_item[ 'link' ];        /**         * Filter XML-RPC-prepared data for the given media item.         *         * @since 3.4.0         *         * @param array $_media_item An array of media item data.         * @param object $media_item Media item object.         * @param string $thumbnail_size Image size.         */        return $_media_item;    }    function EditExistingPost( $fields, $custom_fields, $post_category, $post_tags, $post_featured_image )    {        if( isset( $fields[ 'post_id' ] ) )        {            $fields[ 'ID' ] = $fields[ 'post_id' ];        }        wp_update_post( $fields );        $permalink = get_permalink( $fields[ 'post_id' ] );        if( is_array( $custom_fields ) && count( $custom_fields ) > 0 )        {            foreach( $custom_fields as $custom_field )            {                add_post_meta( $fields[ 'post_id' ], $custom_field[ 'key' ], serialize( $custom_field[ 'value' ] ) );            }        }        include_once( ABSPATH . 'wp-admin/includes/taxonomy.php' ); //Contains wp_create_categories        if( isset( $post_tags ) && count( $post_tags ) > 0 )        {            wp_set_post_tags( $fields[ 'post_id' ], $post_tags );        }        if( isset( $post_category ) && is_array( $post_category ) )        {            foreach( $post_category as $cat )            {                if( $id = category_exists( $cat ) )                    $cat_ids[] = $id;            }            if( count( $cat_ids ) > 0 )                wp_set_post_categories( $fields[ 'post_id' ], $cat_ids );        }        //If featured image exists - set it        if( $post_featured_image != null )        {            update_post_meta( $fields[ 'post_id' ], '_thumbnail_id', $post_featured_image ); //Add the thumbnail to the post!        }        $ret[ 'success' ]   = true;        $ret[ 'permalink' ] = $permalink;        $ret[ 'post_id' ]   = $fields[ 'post_id' ];        return $ret;    }    function NewPost()    {        //Read form data        $custom_fields = unserialize( stripslashes( $_POST[ 'custom_fields' ] ) );        $post_terms_names = unserialize( stripslashes( $_POST[ 'terms_names' ] ) );        $post_category    = isset( $post_terms_names[ 'category' ] ) ? $post_terms_names[ 'category' ] : null;        $post_tags = isset( $post_terms_names[ 'post_tag' ] ) ? $post_terms_names[ 'post_tag' ] : null;        $post_featured_image = $_POST[ 'post_thumbnail' ];        $res     = $this->CreatePost( $_POST, $custom_fields, $post_category, $post_tags, $post_featured_image );        $created = $res[ 'success' ];        if( $created != true )        {            $this->HandleError( $created );        }        $information              = array();        $information[ 'post_id' ] = $res[ 'post_id' ];        $information[ 'link' ]    = $res[ 'permalink' ];        $this->ApiEcho( $information );    }    function CreatePost( $fields, $custom_fields, $post_category, $post_tags, $post_featured_image )    {        global $current_user;        //Search for all the images added to the new post        //some images have a href tag to click to navigate to the image.. we need to replace this too        if( isset( $post_tags ) && $post_tags != '' )            $fields[ 'tags_input' ] = $post_tags;        //Save the post to the wp        remove_filter( 'content_save_pre', 'wp_filter_post_kses' );  // to fix brake scripts or html        $post_status             = $fields[ 'post_status' ];        $fields[ 'post_status' ] = 'auto-draft';        $new_post_id             = wp_insert_post( $fields, $wp_error );        //Show errors if something went wrong        if( is_wp_error( $wp_error ) )        {            return $wp_error->get_error_message();        }        if( empty( $new_post_id ) )        {            return 'Undefined error';        }        wp_update_post( array( 'ID' => $new_post_id, 'post_status' => $post_status ) );        $permalink = get_permalink( $new_post_id );        if( is_array( $custom_fields ) && count( $custom_fields ) > 0 )        {            foreach( $custom_fields as $custom_field )            {                add_post_meta( $new_post_id, $custom_field[ 'key' ], serialize( $custom_field[ 'value' ] ) );            }        }        include_once( ABSPATH . 'wp-admin/includes/taxonomy.php' ); //Contains wp_create_categories        if( isset( $post_tags ) && count( $post_tags ) > 0 )        {            wp_set_post_tags( $new_post_id, $post_tags );        }        if( isset( $post_category ) && is_array( $post_category ) )        {            foreach( $post_category as $cat )            {                if( $id = category_exists( $cat ) )                    $cat_ids[] = $id;            }            if( count( $cat_ids ) > 0 )                wp_set_post_categories( $new_post_id, $cat_ids );        }        //If featured image exists - set it        if( $post_featured_image != null )        {            update_post_meta( $new_post_id, '_thumbnail_id', $post_featured_image ); //Add the thumbnail to the post!        }        $ret[ 'success' ]   = true;        $ret[ 'permalink' ] = $permalink;        $ret[ 'post_id' ]   = $new_post_id;        return $ret;    }    function UploadImage( $image_path = '', $no_api_echo = false )    {        if( !isset( $image_path ) || $image_path == '' )        {            $image_path = isset( $_POST[ 'image_url' ] ) ? $_POST[ 'image_url' ] : '';        }        include_once( ABSPATH . 'wp-admin/includes/file.php' ); //Contains download_url        //Download $img_url        $temporary_file = download_url( $image_path );        if( is_wp_error( $temporary_file ) )        {            $this->HandleError( 'There is an error with this method' );        }        else        {            $upload_dir     = wp_upload_dir();            $local_img_path = $upload_dir[ 'path' ] . DIRECTORY_SEPARATOR . basename( $image_path ); //Local name            $local_img_url  = $upload_dir[ 'url' ] . '/' . basename( $image_path );            $moved          = @rename( $temporary_file, $local_img_path );            if( $moved )            {                $wp_filetype = wp_check_filetype( basename( $image_path ), null ); //Get the filetype to set the mimetype                $attachment  = array(                    'post_mime_type' => $wp_filetype[ 'type' ],                    'post_title' => preg_replace( '/\.[^.]+$/', '', basename( $image_path ) ),                    'post_content' => '',                    'post_status' => 'inherit'                );                $attach_id   = wp_insert_attachment( $attachment, $local_img_path ); //Insert the image in the database                require_once( ABSPATH . 'wp-admin/includes/image.php' );                $attach_data = wp_generate_attachment_metadata( $attach_id, $local_img_path );                wp_update_attachment_metadata( $attach_id, $attach_data ); //Update generated metadata                if( !$no_api_echo )                {                    $this->ApiEcho( array( 'id' => $attach_id, 'url' => $local_img_url ) );                }                else                {                    return array( 'id' => $attach_id, 'url' => $local_img_url );                }            }        }        if( file_exists( $temporary_file ) )        {            unlink( $temporary_file );        }        return null;    }    function GetTerms()    {        $taxonomy = ( $_POST[ 'taxonomy' ] );        $rslt     = get_terms( taxonomy_exists( $taxonomy ) ? $taxonomy : 'category', 'hide_empty=0' );        $this->ApiEcho( serialize( $rslt ) );    }    function set_terms()    {        $id       = ( $_POST[ 'id' ] );        $terms    = ( $_POST[ 'terms' ] );        $taxonomy = ( $_POST[ 'taxonomy' ] );        if( trim( $terms ) != '' )        {            $terms = explode( ',', $terms );            if( count( $terms ) > 0 )            {                wp_set_object_terms( $id, array_map( 'intval', $terms ), taxonomy_exists( $taxonomy ) ? $taxonomy : 'category' );            }        }    }}